//===== eAthena/rAthena Script =======================================
//= Weapon Mayomayo
//===== Template by: =========================================
//= Pang Cake
//===== Modified by: =========================================
//= Mysterious
//===== Current Version: =====================================
//= 1.2
//===== Compatible With: =====================================
//= eAthena / rAthena SVN
//===== Description: =========================================
//= This NPC forges NAMELESS weapons, and can incorporate element stones and star crumbs.
//= The forge chance is adjustable by changing the formula below.
//===== Additional Comments: ========================================
//= v1.0 - Initial release [Pang Cake]
//= v1.1 - Fixed a couple of things [Mysterious]
//= v1.2 - Proper disclaimer [Mysterious]
//============================================================
malangdo,213,167,4	script	Mayomayo	555,{
// ============== Configurations ================
set .@Free,1; // 1 = Allow Awaken without another copy
set .@Reset,1; // 1 = Allow reset (buggy)
// ============== End Configurations ================		
	mes "[^FF6600Mayomayo^000000]";
	mes "Hello, I am Mayomayo the Awakener.";
	mes "I can Awaken certain equips dropped from monsters";
	mes "forged items, socket Awakened gears that you're using.";
	next;
	switch( select( "Awaken Equips.:Awaken Crimson Weapon.:Explain Awaken.:Cancel." ) ) {
		case 4:
			mes .n$;
			mes "Oh, okay nyan";
			close;
		case 3:
			mes "[^FF6600Mayomayo^000000]";
			mes "Basically Awaken is adding few random options to your equip,";
			mes "well, you'll know after you've tried.";
			close; 
		case 2: // Awaken Crimson Weapon
			.@x = getequipid(9);
			if (.@x == -1) { mes .n$;
				mes "You don't have any weapon in your right hand!";
				close;
			}
			set .@part,9;			
			mes .n$;
			mes "Crimson weapons have potential to get elemental properties.";
			next;
			switch(getequipid(.@part)) {
			// Crimson
				case 28604:
				case 18130:
				case 28705:
				case 13327:
				case 28007:
				case 1839:
				case 1498:
				case 16040:
				case 1680:
				case 13127:
				case 13454:
				case 1443:
				case 28106:
				case 2025:
				case 21015:
				case 1939:
				case 1995:	
			if (.@Free == 1){	set .@Forged,1;}
				set .@Type$,"CR";
				set .@Level,7;
				set .@crimson,1;
				goto L_Awaken;
				}
			mes .n$;
			mes "You're not using any kind of crimson weapons.";
			close;
		case 1:
			mes .n$;
			mes "Which one ?";
			next;
	switch( select( "Awaken Weapon.:Awaken Shield.:Awaken Armor.:Awaken Garment.:Awaken Shoes.:Cancel." ) ) {
		case 6:
			mes .n$;
			mes "Oh, okay dude";
			close;
			
		case 1: // Awaken Forged Weapon
			.@x = getequipid(9);
			if (.@x == -1) { mes .n$;
				mes "You don't have any weapon in your right hand!";
				close;
			}
			mes .n$;
			mes "To apply a property to a weapon, you need to have it equipped in your right hand.";
			next;
			mes .n$;
			mes "Weapon Awaken will based on your choice.";
			set .@part,9;
//			for(set .@i,0; .@i<4; set .@i,.@i+1)
//				set .@slot[.@i], getequipcardid(.@part,.@i);
//			if (.@slot[0]==255 || .@slot[0]==254 || .@slot[0]<0) {
//			set .@Forging,1;
			if (.@Free == 1){	set .@Forged,1;}
//			}

			mes "You can choose the enchant type.";
			next;
			switch( select( "Melee Type", "Range Type", "Magic Type", "Reset Enchant","Stop") ) {
			case 5:
				mes "[^FF6600Mayomayo^000000]";
				mes "Ok. If you change your mind, let me know.";
				close;
			case 4:
				goto L_Reset;
			case 1:
				set .@Type$,"P";
				break;
			case 2:
				set .@Type$,"R";
				break;
			case 3:
				set .@Type$,"M";
				break;
			}
			break;
			
		case 2: // Awaken Shield
			if (getequipid(8) && getiteminfo(getequipid(8), 5) == 32){
			set .@part,8;			
			mes .n$;
			mes "You can choose the enchant type.";
			next;
			switch( select( "Physical Type", "Magic Type", "Reset Enchant","Stop") ) {
			case 4:
				mes "[^FF6600Mayomayo^000000]";
				mes "Ok. If you change your mind, let me know.";
				close;
			case 3:
				goto L_Reset;
			case 1:
				set .@Type$,"S";
				break;
			case 2:
				set .@Type$,"SM";
				break;
			}		
			set .@onehand,1; set .@shield,1;
			if (.@Free == 1){	set .@Forged,1;}
			break;
			}
			mes .n$;
			mes "You don't have any shield in your left hand!";
				close;			
				
		case 3: // Awaken Armor
			.@x = getequipid(7);
			if (.@x == -1) { mes .n$;
				mes "You're not wearing any armor!";
				close;
			}		
			set .@part,7;
			mes .n$;
			mes "You can choose the enchant type.";
			next;
			switch( select( "Physical Type", "Magic Type", "Reset Enchant","Stop") ) {
			case 4:
				mes "[^FF6600Mayomayo^000000]";
				mes "Ok. If you change your mind, let me know.";
				close;
			case 3:
				goto L_Reset;
			case 1:
				set .@Type$,"AP";
				break;
			case 2:
				set .@Type$,"AM";
				break;
			}
			break;

		case 4: // Awaken Garment
			.@x = getequipid(3);
			if (.@x == -1) { mes .n$;
				mes "You're not wearing any garment!";
				close;
			}		
			set .@part,3;
			mes .n$;
			mes "You can choose the enchant type.";
			next;
			switch( select( "Physical Type", "Magic Type", "Reset Enchant","Stop") ) {
			case 4:
				mes "[^FF6600Mayomayo^000000]";
				mes "Ok. If you change your mind, let me know.";
				close;
			case 3:
				goto L_Reset;
			case 1:
				set .@Type$,"GP";
				break;
			case 2:
				set .@Type$,"GM";
				break;
			}
			break;			

		case 5: // Awaken Shoes
			.@x = getequipid(2);
			if (.@x == -1) { mes .n$;
				mes "You're not wearing any shoes!";
				close;
			}		
			set .@part,2;
			mes .n$;
			mes "You can choose the enchant type.";
			next;
			switch( select( "Physical Type", "Magic Type", "Reset Enchant","Stop") ) {
			case 4:
				mes "[^FF6600Mayomayo^000000]";
				mes "Ok. If you change your mind, let me know.";
				close;
			case 3:
				goto L_Reset;
			case 1:
				set .@Type$,"SHP";
				break;
			case 2:
				set .@Type$,"SHM";
				break;
			}					
			break;
			
		case 11: // Awaken Acc
			.@x = getequipid(EQI_ACC_R);
			if (.@x == -1) { mes .n$;
				mes "You're not wearing any acc!";
				close;
			}
			mes .n$;
			mes "Acc eh?";				
			set .@part,EQI_ACC_R;
			mes "Accesories only have 1 enchant type.";	
			set .@Type$,"HGM";
			break;			
			break;

		case 7:
			.@x = getequipid(EQI_COSTUME_HEAD_TOP);
			if (.@x == -1) { mes .n$;
				mes "You're not wearing any costume headgear!";
				close;
			}		
			set .@part,EQI_COSTUME_HEAD_TOP;
			if (isequipped(31128)){
				if(readparam(bInt)>(readparam(bStr))){set .@Type$,"TAEKM"; }
				else {set .@Type$,"TAEKP"; } 
				if (.@Free == 1){	set .@Forged,1;} 
				goto L_Awaken; }
			else if (isequipped(21300)){
				if(readparam(bInt)>(readparam(bStr))){set .@Type$,"TAEKM"; }
				else {set .@Type$,"TAEKP"; }
				if (.@Free == 1){	set .@Forged,1;}
				goto L_Awaken;}
			else if (isequipped(31036)){
				if(readparam(bInt)>(readparam(bStr))){set .@Type$,"TAEKM"; }
				else {set .@Type$,"TAEKP"; }
				if (.@Free == 1){	set .@Forged,1;}
				goto L_Awaken;}
			else if (isequipped(5174)){
				if(readparam(bInt)>(readparam(bStr))){set .@Type$,"TAEKM"; }
				else {set .@Type$,"TAEKP"; }
				if (.@Free == 1){	set .@Forged,1;}
				goto L_Awaken;}				
			else {
				mes .n$;
				mes "You're not wearing any taekwon exclusive costume headgear!";
				close;	
			}				
			break;
		}

	switch(getequipid(.@part)) {
			case 1224:	// Sword_Breaker
			case 1225:	// Mail_Breaker
			case 1227:	// Weeder_Knife
			case 1229:	// Mama's_Knife
			case 1232:	// Assasin_Dagger
			case 1233:	// Exercise
			case 1235:	// Azoth
			case 1236:	// Sucsamad
			case 1237:	// Grimtooth_
			case 1240:	// Princess_Knife
			case 1241:	// Cursed_Dagger
			case 1242:	// Counter_Dagger
			case 1244:	// Holy_Dagger
			case 13046:	// Krieg
			case 13047:	// Weihna
			case 13061:	// Black_Wing
			case 1223:	// Forturn_Sword
			case 1228:	// Combat_Knife
			case 1234:	// Moonlight_Sword
			case 1230:	// House_Auger
			case 1231:	// Bazerald
			case 13062:	// Ancient_Dagger
			case 1305:	// Cleaver
			case 1311:	// Vecer_Axe
			case 1131:	// Ice_Falchon
			case 1133:	// Fire_Brand
			case 1134:	// Scissores_Sword
			case 1135:	// Cutlas
			case 13400:	// Cutlas_
			case 1136:	// Solar_Sword
			case 1138:	// Mysteltainn_
			case 1139:	// Tale_Fing_
			case 1140:	// Byeorrun_Gum
			case 1141:	// Immaterial_Sword
			case 1148:	// Star_Dust_Blade
			case 13421:	// Ruber
			case 13431:	// Chrome_Sword
			case 1137:	// Excalibur
			case 1130:	// Nagan
			case 1132:	// Edge
			case 13460:	// Sealed_Magic_Sword
			case 13461:	// Sealed_Evil_Sword
			case 13462: // Sealed_Maximum_Sword
			case 13412:	// Twin_Edge_B
			case 13413:	// Twin_Edge_R
			case 1420:	// Long_Horn
			case 1413:	// Gungnir
			case 1414:	// Gelerdria
			case 1416:	// Tjungkuletti
			case 1418:	// Gungnir_
			case 1433:	// Imperial_Spear
			case 1415:	// Skewer
			case 1421:	// Battle_Hook
			case 1422:	// Hunting_Spear
			case 1447: // Poison_Forged_Spear
			case 1616:	// Staff_Of_Wing
			case 1629:	// Walking_Stick
			case 1631:	// Holy_Stick
			case 1643:	// Dead_Tree_Cane
			case 1654:	// Mental_Stick
			case 1636:	// Thorn_Staff
			case 1637:	// Eraser
			case 1697: // Exquisite_Yellow_Foxtail_Model
			case 1693: // Magical_Yellow_Foxtail_Staff
			case 1524:	// Golden_Mace
			case 1525:	// Long_Mace
			case 1527:	// Quadrille
			case 1539:	// Golden_Mace_
			case 1541:	// Nemesis
			case 16000:	// Erde
			case 16001:	// Red_Square_Bag
			case 16010:	// Red_Ether_Bag
			case 1523:	// Spike
			case 1538:	// Spike_
			case 1526:	// Slash
			case 1528:	// Grand_Cross
			case 1540:	// Grand_Cross_
			case 1557:	// Book_Of_The_Apocalypse
			case 1558:	// Girl's_Diary
			case 1559:	// Legacy_Of_Dragon
			case 1561:	// Hardback
			case 1562:	// Bible_Of_Battlefield
			case 1565:	// Death_Note
			case 1813:	// Kaiser_Knuckle
			case 1814:	// Berserk
			case 1815:	// Claw_Of_Garm
			case 1816:	// Berserk_
			case 1830:	// Sura_Rampage
			case 1913:	// Electronic_Guitar
			case 1918:	// Oriental_Lute
			case 1920:	// Berserk_Guitar
			case 1922:	// Oriental_Lute_
			case 1926:	// Harp_Of_Nepenthes
			case 1930:	// Green_Whistle
			case 1962:	// Lariat
			case 1963:	// Rapture_Rose
			case 1964:	// Chemeti
			case 1969:	// Bladed_Whip
			case 1970:	// Queen's_Whip
			case 1972:	// Electric_Eel
			case 1973:	// Sea_Witch_Foot
			case 1974:	// Carrot_Whip
			case 1976:	// Queen's_Whip_
			case 1979:	// Stem_Of_Nepenthes
			case 1984:	// Stem_Whip
			case 1985:	// Rosebine
// Two Handed
			case 1719:	// Bow_Of_Roguemaster
			case 1722:	// Balistar
			case 1724:	// Dragon_Wing
			case 1725:	// Bow_Of_Minstrel
			case 1727:	// Balistar_
			case 1737:	// Ixion_Wing
			case 1740:	// Nepenthes_Bow
			case 1741:	// Cursed_Lyre
			case 1745:	// Falken_Blitz
			case 18103:	// Mystic_Bow
			case 1720:	// Bow_Of_Rudra
			case 1473:	// Wizardy_Staff
			case 2004:	// Kronos
			case 2005:	// Dea_Staff
			case 2001:	// Divine_Cross
			case 2000:	// Destruction_Rod
			case 2027: // Sunflower_Kid
			case 1466:	// Crescent_Scythe
			case 1467:	// Bill_Guisarme
			case 1468:	// Zephyrus
			case 1469:	// Longinus's_Spear
			case 1470:	// Brionac
			case 1471:	// Hell_Fire
			case 1474:	// Gae_Bolg
			case 1476:	// Crescent_Scythe_
			case 1477:	// Spectral_Spear
			case 1478:	// Ahlspiess
			case 1479:	// Spectral_Spear_
			case 1480:	// Gae_Bolg_
			case 1481:	// Zephyrus_
			case 1484:	// Cardo
			case 1164:	// Muramasa
			case 1166:	// Dragon_Slayer
			case 1167:	// Schweizersabel
			case 1168:	// Zweihander
			case 1170:	// Katzbalger
			case 1171:	// Zweihander_
			case 1176:	// Muscle_Cutter
			case 1178:	// Schweizersabel_
			case 1180:	// Dragon_Slayer_
			case 1181:	// Tae_Goo_Lyeon
			case 1182:	// Bloody_Eater
			case 1188:	// Veteran_Sword
			case 1189:	// Krasnaya
			case 1196:	// Chrome_Twohand_Sword
			case 1165:	// Masamune
			case 1169:	// Executioner_
			case 1179:	// Executioner__
			case 1175:	// Altas_Weapon
			case 1185:	// Violet_Fear
			case 1186:	// Death_Guidance
			case 21018:	// Lindy_Hop
			case 1364:	// Great_Axe
			case 1365:	// Sabbath
			case 1385:	// Bradium_Stonehammer
			case 1367:	// Slaughter
			case 1368:	// Tomahawk
			case 1387:	// Giant_Axe
			case 1369:	// Guillotine
			case 1363:	// Brood_Axe
			case 1376:	// Heart_Breaker
			case 1377:	// Hurricane_Fury
			case 1366:	// Right_Epsilon
			case 1370:	// Doom_Slayer
			case 1371:	// Doom_Slayer_	
			case 1271:	// Blood_Tears
			case 1263:	// Unholy_Touch
			case 1270:	// Drill_Katar
			case 1284:	// Krishna
			case 1285:	// Cakram
			case 1268:	// Wild_Beast_Claw
			case 1269:	// Inverse_Scale
			case 1265:	// Bloody_Roar
			case 1261:	// Infiltrator
			case 1266:	// Infiltrator_
			case 28010:	// Juliette_D._Rachel
			case 13138:	// Dark_Rose
			case 28223:	// Finisher
			case 28224:	// Dustfire
			case 28225:	// Burning_Rose
			case 28226:	// Avenger
	
// Two Handed
	case 1149:
	case 1157:
	case 1158:
	case 1160:
	case 1162:
	case 1163:
	case 1172:
	case 1252:
	case 1253:
	case 1254:
	case 1255:
	case 1256:
	case 1257:
	case 1258:
	case 1259:
	case 1260:
	case 1262:
	case 1264:
	case 1275:
	case 1276:
	case 1277:
	case 1278:
	case 13107:
	case 13163:
	case 13164:
	case 13165:
	case 13167:
	case 13168:
	case 13169:
	case 13170:
	case 13300:
	case 13301:
	case 13302:
	case 13303:
	case 13304:
	case 1357:
	case 1358:
	case 1360:
	case 1361:
	case 1375:
	case 1384:
	case 1410:
	case 1457:
	case 1458:
	case 1460:
	case 1461:
	case 1463:
	case 1464:
	case 1472:	
	case 1483:
	case 1485:
	case 1532:
	case 1620:
	case 1713:
	case 1714:
	case 1715:
	case 1716:
	case 1718:
	case 1721:
	case 1723:
	case 1726:
	case 1730:
	case 1731:
	case 1732:
	case 1733:
	case 1734:
	case 1736:

// Lv 1&2 Weapon

	case 1101:
	case 1102:
	case 1104:
	case 1105:
	case 1107:
	case 1108:
	case 1110:
	case 1111:
	case 1113:
	case 1114:
	case 1116:
	case 1117:
	case 1122:
	case 1151:
	case 1152:
	case 1154:
	case 1155:
	case 1201:
	case 1202:
	case 1204:
	case 1205:
	case 1207:
	case 1208:
	case 1210:
	case 1211:
	case 1213:
	case 1214:
	case 1216:
	case 1217:
	case 1247:
	case 1248:
	case 1249:
	case 1251:
	case 13000:
	case 13008:
	case 13011:
	case 13012:
	case 13013:
	case 1301:
	case 1302:
	case 13034:		
	case 13035:
	case 1307:	
	case 13101:
	case 13102:
	case 13103:
	case 13104:
	case 13150:
	case 13151:
	case 13152:
	case 13153:
	case 13154:
	case 13155:
	case 13156:
	case 13157:
	case 13160:
	case 13161:
	case 1351:
	case 1352:
	case 1354:
	case 1355:
	case 1401:
	case 1402:
	case 1404:
	case 1405:
	case 1407:
	case 1408:
	case 1451:
	case 1452:
	case 1454:
	case 1455:
	case 1501:
	case 1502:
	case 1504:
	case 1505:
	case 1507:
	case 1508:
	case 1510:
	case 1511:
	case 1519:
	case 1520:
	case 1550:
	case 1601:
	case 1602:
	case 1604:
	case 1605:
	case 1607:
	case 1608:
	case 1618:
	case 1701:
	case 1702:
	case 1704:
	case 1705:
	case 1707:
	case 1708:
	case 1710:
	case 1711:
	case 1801:
	case 1802:
	case 1803:
	case 1804:
	case 1805:
	case 1806:
	case 1901:
	case 1902:
	case 1903:
	case 1904:
	case 1905:
	case 1906:
	case 1950:
	case 1951:
	case 1952:
	case 1953:
	case 1954:
	case 1955:
	
	
// Lv 3 Weapon
	case 1120:
	case 1124:
	case 1127:
	case 1128:
	case 1142:
	case 1143:
	case 1144:
	case 1145:
	case 1147:
	case 1219:
	case 1220:
	case 1226:
	case 1238:
	case 1239:
	case 1246:
	case 13004:
	case 13006:
	case 13014:
	case 13015:
	case 13038:
	case 13039:
	case 1304:
	case 1306:
	case 1309:
	case 13158:
	case 13159:
	case 13414:
	case 13437:
	case 1417:
	case 1513:
	case 1514:
	case 1517:
	case 1518:
	case 1529:
	case 1531:
	case 1544:
	case 1548:
	case 1551:
	case 1552:
	case 1553:
	case 1554:
	case 1555:
	case 1556:
	case 1560:
	case 1564:
	case 1568:
	case 1569:
	case 1570:
	case 1571:
	case 1572:
	case 1573:	
	case 1611:
	case 1613:
	case 1614:
	case 1615:
	case 1622:
	case 1624:
	case 1625:
	case 1626:
	case 1630:
	case 1646:
	case 1647:
	case 1810:
	case 1812:
	case 1818:
	case 1819:
	case 1820:
	case 1821:
	case 1822:
	case 1825:
	case 1908:
	case 1909:
	case 1910:
	case 1914:
	case 1915:
	case 1916:
	case 1917:
	case 1919:
	case 1925:
	case 1957:
	case 1965:
	case 1966:
	case 1967:
	case 1968:
	case 1971:
	case 1980:

// Lv 4 Weapon	
	case 1119:
	case 1123:
	case 1126:
	case 1129:
	case 1146:
	case 1222:
	case 1245:
	case 13001: // Dragon Killer
	case 13002:
	case 13003:
	case 13009:
	case 13016:
	case 13017:
	case 13018:
	case 13019:
	case 13028:
	case 13030: // Dragon Killer [1]
	case 13031:
	case 13032:
	case 13033:
	case 13049:
	case 13404:
	case 13405:
	case 13401:
	case 1425:
	case 1516:
	case 1522:
	case 16051:
	case 1610:
	case 1617:
	case 1619:
	case 1648:
	case 1807:
	case 1808:
	case 1809:
	case 1811:
	case 1907:
	case 1911:
	case 1912:
	case 1956:
	case 1958:
	case 1959:
	case 1960:
	case 1961:
	case 28717:

if (.@Free == 1){	set .@Forged,1;}
			set .@level,getequipweaponlv(.@part);
			goto L_Awaken;
	}
	
	
switch(getequipid(.@part)) {	
//Armor
//Modified
	case 2553:
	case 2191:
	case 15040:
	case 15058:
	case 20714:
	case 20730:
	case 2597:
//	case 20783:
	case 2594:
	case 15057:
	case 20726:
	case 20728:
	case 20729:
	case 20731:
	case 2584:
//	case 20778: //crimson stole
	case 2177:
	case 22042:
	case 2501:
	case 2502:
	case 2503:
	case 2504:
	case 2505:
	case 2506:
	case 2512:
	case 2305:
	case 2306:
	case 2481:
	case 2307:
	case 2309:
	case 2310:
	case 2348:
	case 5011:
	case 2466:
	case 2507:
	case 2254:
	case 5125:
	case 2420:
	case 2416:
	case 2521:
	case 2355:
	case 2389:
	case 2441:
	case 2432:
	case 2359:
	case 2525:
	case 2434:
	case 2372:
	case 2373:
	case 2371:
	case 2523:
	case 2425:
	case 15000:
	case 2405:
	case 2406:
	case 2315:
	case 2314:
	case 2386:
	case 2350:
	case 2302:
	case 2407:
	case 2375:
	case 2433:
	case 2537:
	case 2374:
	case 2366:
	case 2527:
	case 2515:
	case 2516:
	case 2542:
	case 2320:
	case 2417:
	case 2316:
	case 2317:
	case 2319:
	case 2354:
	case 2419:
	case 2529:
	case 2536:
	case 2530:
	case 2520:
	case 2411:
	case 2412:
	case 2422:
	case 2409:
	case 2327:
	case 2390:
	case 2304:
	case 2388:
	case 2544:
	case 2401:
	case 2402:
	case 2403:
	case 2404:
	case 2342:
	case 15053:
	case 2391:
	case 2318:
	case 2344:
	case 2345:
	case 2399:
	case 2334:
	case 5027:
	case 2308:
	case 2364:
	case 2323:
	case 2311:
	case 2532:
	case 2518:
	case 2519:
	case 2545:
	case 2337:
	case 2321:
	case 2322:
	case 2554:
	case 2353:
	case 2365:
	case 2312:
	case 2313:
	case 2339:
	case 15032:
	case 2161:
	case 2514:
	case 2508:
	case 2343:
	case 2346:
	case 2347:
	case 2324:
	case 2325:
	case 2326:
	case 2328:
	case 2329:
	case 2408:
	case 2426:
	case 2367:
	case 2387:
	case 2440:
	case 2509:
	case 2336:
	case 2340:
	case 2341:
	case 2424:
	case 2330:
	case 2331:
	case 2332:
	case 2335:
	case 2333:
	case 2531:
	case 2522:
	case 2517:
	case 2357:
	case 15012:
	case 15013:
	case 15014:
	case 2524:
	case 2421:
	case 2423:
	case 2418:
	case 2450:
	case 2338:
	case 2528:
	
if (.@Free == 1){	set .@Forged,1;}
			set .@level,5;
			goto L_Awaken;
	}

			switch(getequipid(.@part)) {
			// Shieldx
			case 2101:
			case 2102:
			case 2103:
			case 2104:
			case 2105:
			case 2106:
			case 2107:
			case 2108:
			case 2109:
			case 2121:
			case 2113:
			case 2117:
			case 2118:
			case 2171:
			case 2116:
			case 2147:
			case 2146:
			case 2129:
			case 2133:
			case 2123:
			case 2124:
			case 2138:
			case 2114:
			case 2115:
			case 2110:
			case 2131:
			case 2134:
			case 2125:
			case 2130:
			case 2111:
			case 2128:
			case 2148:
			case 2153:		
		if (.@Free == 1){	set .@Forged,1;}
			set .@level,6;
			set .@shield,1;
			goto L_Awaken;
	}
	
 	
	mes "[^FF6600Mayomayo^000000]";
	mes "This item cannot be awakened by me.";
	close;
	
L_Awaken: 
	disable_items;
	mes "[^FF6600Mayomayo^000000]";
	mes "Equipped: "+getitemname(getequipid(.@part));
	set .@ropt1,getequiprandomoption(.@part,0,ROA_ID);
	set .@ropt2,getequiprandomoption(.@part,1,ROA_ID);
	set .@ropt3,getequiprandomoption(.@part,2,ROA_ID);

if  ((.@Level) == 7 ){
	if(.@ropt1) {
		mes "This crimson item can't be enchanted or get resetted anymore.";
		close;
		}
	}	
if  ((.@Level) < 7 ){
	if  ((.@Level) <3 ){
		if(.@ropt1) {
			mes "This item can't be enchanted anymore.";
			goto L_Reset;
			}
		}
	if(.@ropt2) {
		mes "This item can't be enchanted anymore.";
		goto L_Reset;
		}
	}

if(.@ropt1) {
	mes "1st Enchantment has been applied.";
	mes "Begin second enchant ?";
	next;
	switch( select( "Yeah keep going.:Cancel." ) ) {
		case 1:
		set .@Rand1st,1;
		mes "[^FF6600Mayomayo^000000]";	
		goto L_Random;		
		
		case 2:
		mes "[^FF6600Mayomayo^000000]";	
		mes "Then, please choose a different one.";
		close;
		}
	}	

L_Random:
// Randomize each Option Slot:
// Random Option 1
set .@Opt1,rand(getarraysize(getd(".RandOpt1_"+.@Type$)));
if(getd(".RandOpt1_"+.@Type$+"_MinV["+.@Opt1+"]") != getd(".RandOpt1_"+.@Type$+"_MaxV["+.@Opt1+"]"))
	set .@Opt1_V,rand(getd(".RandOpt1_"+.@Type$+"_MinV["+.@Opt1+"]"),getd(".RandOpt1_"+.@Type$+"_MaxV["+.@Opt1+"]"));
else 
	set .@Opt1_V,getd(".RandOpt1_"+.@Type$+"_MaxV["+.@Opt1+"]");
	
// Random Option 2
set .@Opt2,rand(getarraysize(getd(".RandOpt2_"+.@Type$)));
if(getd(".RandOpt2_"+.@Type$+"_MinV["+.@Opt2+"]") != getd(".RandOpt2_"+.@Type$+"_MaxV["+.@Opt2+"]"))
	set .@Opt2_V,rand(getd(".RandOpt2_"+.@Type$+"_MinV["+.@Opt2+"]"),getd(".RandOpt2_"+.@Type$+"_MaxV["+.@Opt2+"]"));
else 
	set .@Opt2_V,getd(".RandOpt2_"+.@Type$+"_MaxV["+.@Opt2+"]");
	
// Random Option 3
set .@Opt3,rand(getarraysize(getd(".RandOpt3_"+.@Type$)));
if(getd(".RandOpt3_"+.@Type$+"_MinV["+.@Opt3+"]") != getd(".RandOpt3_"+.@Type$+"_MaxV["+.@Opt3+"]"))
	set .@Opt3_V,rand(getd(".RandOpt3_"+.@Type$+"_MinV["+.@Opt3+"]"),getd(".RandOpt3_"+.@Type$+"_MaxV["+.@Opt3+"]"));
else 
	set .@Opt3_V,getd(".RandOpt3_"+.@Type$+"_MaxV["+.@Opt3+"]");

// Random Option 4
set .@Opt4,rand(getarraysize(getd(".RandOpt4_"+.@Type$)));
if(getd(".RandOpt4_"+.@Type$+"_MinV["+.@Opt4+"]") != getd(".RandOpt4_"+.@Type$+"_MaxV["+.@Opt4+"]"))
	set .@Opt4_V,rand(getd(".RandOpt4_"+.@Type$+"_MinV["+.@Opt4+"]"),getd(".RandOpt4_"+.@Type$+"_MaxV["+.@Opt4+"]"));
else 
	set .@Opt4_V,getd(".RandOpt4_"+.@Type$+"_MaxV["+.@Opt4+"]");

// Random Option 5
set .@Opt5,rand(getarraysize(getd(".RandOpt5_"+.@Type$)));
if(getd(".RandOpt5_"+.@Type$+"_MinV["+.@Opt5+"]") != getd(".RandOpt5_"+.@Type$+"_MaxV["+.@Opt5+"]"))
	set .@Opt5_V,rand(getd(".RandOpt5_"+.@Type$+"_MinV["+.@Opt5+"]"),getd(".RandOpt5_"+.@Type$+"_MaxV["+.@Opt5+"]"));
else 
	set .@Opt5_V,getd(".RandOpt5_"+.@Type$+"_MaxV["+.@Opt5+"]");
	


// Apply options to equipped weapon
if( .@Forged == 99 ) {
	if (countitem(getequipid(.@part)) <2) {
	next;
		mes "[^FF6600Mayomayo^000000]";
		mes "You don't have enough copy of item for this.";
		close; 
		}
	}	
	if(.@Level == 1){ set .@Price,2500; set .Stone,3;
		mes "Hmm, a level 1 weapon..";
		mes "You can only enchant this item once.";
		//mes "^0000FF20%^000000 chance to get 2 High Rank random option.";
		//mes "^0000FF5%^000000 chance to get 3 High Rank random option.";
		//mes "^0000FF0.01%^000000 chance to get 5 High Rank random option.";
		mes "Cost : ^0000FF2500^000000 zeny.";
		mes "And an ^FF0000Oridecon^000000."; }
	if(.@Level == 2){ set .@Price,10000; set .Stone,3;
		mes "Hmm, a level 2 weapon..";
		mes "You can only enchant this item once.";
		//mes "^0000FF20%^000000 chance to get 2 High Rank random option.";
		//mes "^0000FF5%^000000 chance to get 3 High Rank random option.";
		//mes "^0000FF0.01%^000000 chance to get 5 High Rank random option.";
		mes "Cost : ^0000FF400.000^000000 zeny.";
		mes "And an ^FF0000Oridecon^000000."; }				
	if(.@Level == 3){ set .@Price,250000; set .Stone,3;
		mes "Hmm, a level 3 weapon..";
		mes "You can enchant this item twice.";
		//mes "^0000FF20%^000000 chance to get 2 High Rank random option.";
		//mes "^0000FF5%^000000 chance to get 3 High Rank random option.";
		//mes "^0000FF0.01%^000000 chance to get 5 High Rank random option.";
		mes "Cost : ^0000FF400.000^000000 zeny.";
		mes "And an ^FF0000Oridecon^000000."; }
	if(.@Level == 4){ set .@Price,1000000; set .Stone,3;
		mes "Hmm, a level 4 weapon..";
		mes "You can enchant this item twice.";
		//mes "^0000FF20%^000000 chance to get 2 High Rank random option.";
		//mes "^0000FF5%^000000 chance to get 3 High Rank random option.";
		//mes "^0000FF0.01%^000000 chance to get 5 High Rank random option.";
		mes "Cost : ^0000FF1.000.000^000000 zeny.";
		mes "And an ^FF0000Oridecon^000000."; }
	if(.@Level == 5){ set .@Price,400000; set .Stone,4;
		mes "Armory awakening needs 400.000.";
		mes "And an ^FF0000Elunium^000000.";
		mes "You can enchant this item twice.";
		//mes "^0000FF50%^000000 chance to get 1 High Rank random option.";
		//mes "^0000FF20%^000000 chance to get 2 High Rank random option.";
		//mes "^0000FF5%^000000 chance to get 3 High Rank random option.";
		//mes "^0000FF0.01%^000000 chance to get 5 High Rank random option.";
		}
	if(.@Level == 6){ set .@Price,400000; set .Stone,4;
		mes "Armory awakening needs 400.000.";
		mes "And an ^FF0000Elunium^000000.";
		mes "You can enchant this item twice.";
		//mes "^0000FF50%^000000 chance to get 1 High Rank random option.";
		//mes "^0000FF20%^000000 chance to get 2 High Rank random option.";
		//mes "^0000FF5%^000000 chance to get 3 High Rank random option.";
		//mes "^0000FF0.01%^000000 chance to get 5 High Rank random option.";
		}		
	if(.@Level == 7){ set .@Price,0; set .Stone,3;
		mes "Crimson weapons Awaken is free.";
		mes "You'll get one permanent element endow option.";
		mes "And it has ^0000FF100%^000000 success rate for awakening."; 
			}
		if( .Stone == 1 ) {
			setd ".Stone$", "Phracon ";
			set .@item,1010;
		}
		if( .Stone == 2 ) {
			setd ".Stone$", "Emverteracon ";
			set .@item,1011;
		}
		if( .Stone == 3 ) {
			setd ".Stone$", "Oridecon ";
			set .@item,984;
		}
		if( .Stone == 4 ) {
			setd ".Stone$", "Elunium ";
			set .@item,985;
		}
next;
	mes "[^FF6600Mayomayo^000000]";
	mes "I'll enchant your item now.";
	next;
switch( select( "Sure.:Cancel." ) ) {
	case 2:
		mes "[^FF6600Mayomayo^000000]";
		mes "Oh, Okay,.";
		mes "Come back here when you changed your mind.";
		close;

	case 1:
		if (Zeny < .@Price) {
		mes "[^FF6600Mayomayo^000000]";
		mes "You don't even have enough money for this.";
		close;
		}
		if (countitem(.@item) < 1){
		mes "[^FF6600Mayomayo^000000]";
		mes "You sure you have enough  ^FF0000"+ .Stone$ +"^000000 for this.?";
		close;
		}		
		if (Zeny < .@Price) {
		mes "[^FF6600Mayomayo^000000]";
		mes "You don't even have enough money for this.";
		close;
		}		
		set zeny,zeny -(.@Price);
		delitem .@item,1;		
		mes "[^FF6600Mayomayo^000000]";
		mes "Give me a second ..";
		
if( .@Level == 1 ) {
	if(( .@Rand1st)==1){
			setrandomoption(.@part,1,getd(".RandOpt4_"+.@Type$+"["+.@Opt4+"]"),.@Opt4_V,0); set .@success,1;
			goto L_Finish;
		}
	else {	
		setrandomoption(.@part,0,getd(".RandOpt1_"+.@Type$+"["+.@Opt1+"]"),.@Opt1_V,0); set .@success,1;
		goto L_Finish;	
	}
}

if( .@Level == 2 ) {
	if(( .@Rand1st)==1){
			setrandomoption(.@part,1,getd(".RandOpt4_"+.@Type$+"["+.@Opt4+"]"),.@Opt4_V,0); set .@success,1;
			goto L_Finish;
		}
	else {	
		setrandomoption(.@part,0,getd(".RandOpt1_"+.@Type$+"["+.@Opt1+"]"),.@Opt1_V,0); set .@success,1;
		goto L_Finish;	
	}
}

if( .@Level == 3) {
	if(( .@Rand1st)==1){
			setrandomoption(.@part,1,getd(".RandOpt4_"+.@Type$+"["+.@Opt4+"]"),.@Opt4_V,0); set .@success,1;
			goto L_Finish;
		}
	else {	
		setrandomoption(.@part,0,getd(".RandOpt4_"+.@Type$+"["+.@Opt4+"]"),.@Opt4_V,0); set .@success,1;
		goto L_Finish;	
	}
}

if( .@Level == 4) {
	if(( .@Rand1st)==1){
			setrandomoption(.@part,1,getd(".RandOpt4_"+.@Type$+"["+.@Opt4+"]"),.@Opt4_V,0); set .@success,1;
			goto L_Finish;
		}
	else {	
		setrandomoption(.@part,0,getd(".RandOpt4_"+.@Type$+"["+.@Opt4+"]"),.@Opt4_V,0); set .@success,1;
		goto L_Finish;	
	}
}

if( .@Level == 5) {
	if(( .@Rand1st)==1){
			setrandomoption(.@part,1,getd(".RandOpt4_"+.@Type$+"["+.@Opt4+"]"),.@Opt4_V,0); set .@success,1;
			goto L_Finish;
		}
	else {	
		setrandomoption(.@part,0,getd(".RandOpt1_"+.@Type$+"["+.@Opt1+"]"),.@Opt1_V,0); set .@success,1;
		goto L_Finish;	
	}
}

if( .@Level == 6) {
	if(( .@Rand1st)==1){
			setrandomoption(.@part,1,getd(".RandOpt4_"+.@Type$+"["+.@Opt4+"]"),.@Opt4_V,0); set .@success,1;
			goto L_Finish;
		}
	else {	
		setrandomoption(.@part,0,getd(".RandOpt1_"+.@Type$+"["+.@Opt1+"]"),.@Opt1_V,0); set .@success,1;
		goto L_Finish;	
	}
}



else if( .@Level == 7) {
.@rand = rand( 10000 ); // total 100
setrandomoption(.@part,0,getd(".RandOpt1_"+.@Type$+"["+.@Opt1+"]"),.@Opt1_V,0); set .@success,1;
//if ( .@rand < 501 ){setrandomoption(.@part,1,getd(".RandOpt2_"+.@Type$+"["+.@Opt2+"]"),.@Opt2_V,0); set .@success,1;}
//if ( .@rand < 101 ){setrandomoption(.@part,2,getd(".RandOpt3_"+.@Type$+"["+.@Opt3+"]"),.@Opt3_V,0); set .@success,1;}
//if ( .@rand < 11 ){setrandomoption(.@part,3,getd(".RandOpt4_"+.@Type$+"["+.@Opt4+"]"),.@Opt4_V,0); set .@success,1;}
//if ( .@rand < 11 ){setrandomoption(.@part,4,getd(".RandOpt5_"+.@Type$+"["+.@Opt5+"]"),.@Opt5_V,0);set .@success,1;}
if (.@success == 1){goto L_Finish;}
else goto L_Broke;
}

end;

L_Finish:
next;
mes "[^FF6600Mayomayo^000000]";
mes "Random bonus properties have been applied on your equipment.";
end;	

L_Broke:
next;
specialeffect EF_SUI_EXPLOSION;
mes "[^FF6600Mayomayo^000000]";
mes "HoLy sHiT, it's exploded LOL.";
mes "RIP money brah.";
delequip .@part;
end; 


					L_Reset:
					mes "[^FF6600Mayomayo^000000]";
					mes "Equipped: "+getitemname(getequipid(.@part));
					set .@ropt1,getequiprandomoption(.@part,0,ROA_ID);
					set .@ropt2,getequiprandomoption(.@part,1,ROA_ID);
					set .@ropt3,getequiprandomoption(.@part,2,ROA_ID);
					if (.@ropt1) {			
					mes "Reset enchant ?";
					mes "(Cost 1.000.000 Zeny).";				
					next;
					switch( select( "Cancel.:Reset Enchant." ) ) {
						case 1:
							mes "[^FF6600Mayomayo^000000]";	
							mes "Then, please choose a different one.";
							close;
					
						case 2:				
						if (Zeny < 1000000) {
						mes "[^FF6600Mayomayo^000000]";
						mes "You don't even have enough money for this.";
						close;
						}	
						.@equip_id = getequipid(.@part);
						.@refine = getequiprefinerycnt(.@part);
						for (.@i = 0; .@i < 4; .@i++)
							.@card[.@i] = getequipcardid(.@part, .@i);
						delequip .@part;
						set zeny,zeny -(1000000);
						getitem2 .@equip_id, 1, 1,.@refine,0,.@card[0],.@card[1],.@card[2],.@card[3];
						mes "[^FF6600Mayomayo^000000]";	
						mes "Done reset enchant.";
						close;
							}
						}
					if (.@ropt2) {			
					mes "Reset enchant ?";
					mes "(Cost 1.000.000 Zeny).";				
					next;
					switch( select( "Cancel.:Reset Enchant." ) ) {
						case 1:
							mes "[^FF6600Mayomayo^000000]";	
							mes "Then, please choose a different one.";
							close;
					
						case 2:				
						if (Zeny < 1000000) {
						mes "[^FF6600Mayomayo^000000]";
						mes "You don't even have enough money for this.";
						close;
						}	
						.@equip_id = getequipid(.@part);
						.@refine = getequiprefinerycnt(.@part);
						for (.@i = 0; .@i < 4; .@i++)
							.@card[.@i] = getequipcardid(.@part, .@i);
						delequip .@part;
						set zeny,zeny -(1000000);
						getitem2 .@equip_id, 1, 1,.@refine,0,.@card[0],.@card[1],.@card[2],.@card[3];
						mes "[^FF6600Mayomayo^000000]";	
						mes "Done reset enchant.";
						close;
							}
						}						
						mes "This item is not even enchanted yet..";
						close;						

				
end;
}
OnInit:
set .n$,"[^FF6600Mayomayo^000000]";
// ========= CRIMSON ELEMENT =========
// - Crimson
setarray .RandOpt1_CR[0],
						RDMOPT_WEAPON_ATTR_WATER,					// Water
						RDMOPT_WEAPON_ATTR_GROUND,					// GROUND
						RDMOPT_WEAPON_ATTR_FIRE,					// Fire
						RDMOPT_WEAPON_ATTR_WIND,					// Wind
						RDMOPT_WEAPON_ATTR_SAINT,					// Holy
						RDMOPT_WEAPON_ATTR_DARKNESS;				// Shadow				
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_CR_MinV[0],1,1,1,1,1,1,1;
setarray .RandOpt1_CR_MaxV[0],1,1,1,1,1,1,1;



// ========= PHYSICAL Random Option 1=========
// - Phsyical
setarray .RandOpt1_P[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_S_MinV[0],1,1,1,1;
setarray .RandOpt1_S_MaxV[0],3,3,3,3;

// ========= PHYSICAL Random Option 2=========
// - Phsyical
setarray .RandOpt2_P[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_P_MinV[0],3,3,3,3;
setarray .RandOpt2_P_MaxV[0],5,5,5,5;

// ========= PHYSICAL Random Option 3=========
// - Phsyical
setarray .RandOpt3_P[0],
					    RDMOPT_RACE_DAMAGE_NOTHING,	 					// Str
					    RDMOPT_RACE_DAMAGE_ANIMAL,	 					// Agi
					    RDMOPT_RACE_DAMAGE_PLANT,		 				// Vit
					    RDMOPT_RACE_DAMAGE_INSECT,		 				// Luk
					    RDMOPT_RACE_DAMAGE_UNDEAD,		 				// Luk	
					    RDMOPT_RACE_DAMAGE_HUMAN,		 				// Luk						
						RDMOPT_RACE_DAMAGE_FISHS,					// ATK%
						RDMOPT_RACE_DAMAGE_DEVIL,						// ASPD
						RDMOPT_RACE_DAMAGE_ANGEL,					// ASPD%
						RDMOPT_RACE_DAMAGE_DRAGON;				// HIT									
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_P_MinV[0],7,7,7,7,7,7,7,7,7,7;
setarray .RandOpt3_P_MaxV[0],14,14,14,14,14,14,14,14,14,14;

// ========= PHYSICAL Random Option 4=========
// - Phsyical
setarray .RandOpt4_P[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_ATTPOWER,						// ATK
						RDMOPT_VAR_ATKPERCENT,						// ATK%
						RDMOPT_VAR_PLUSASPDPERCENT,					// ASPD%
						RDMOPT_VAR_HITSUCCESSVALUE,					// HIT
						RDMOPT_VAR_CRITICALSUCCESSVALUE,			// CRIT								
						RDMOPT_DAMAGE_CRI_TARGET;					// CRIT DMG					
					
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_P_MinV[0],3,3,3,3,15,3,5,10,4,6;
setarray .RandOpt4_P_MaxV[0],5,5,5,5,40,8,12,25,10,16;

// ========= PHYSICAL Random Option 5=========
// - Phsyical
setarray .RandOpt5_P[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk

						RDMOPT_VAR_ATKPERCENT,						// ATK%
						RDMOPT_VAR_PLUSASPD,						// ASPD
						RDMOPT_VAR_PLUSASPDPERCENT,					// ASPD%
						RDMOPT_VAR_HITSUCCESSVALUE,					// HIT
						RDMOPT_DAMAGE_CRI_TARGET,					// CRIT DMG					
						RDMOPT_VAR_CRITICALSUCCESSVALUE;			// CRIT							
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_P_MinV[0],1,1,1,1,3,1,3,5,5,3;
setarray .RandOpt5_P_MaxV[0],5,5,5,5,8,2,12,13,16,8;

// ========= MAGICAL Random Option 1=========
// - Magic
setarray .RandOpt1_M[0],
					    
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT;	 					// Dex
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_M_MinV[0],1,1,1;
setarray .RandOpt1_M_MaxV[0],3,3,3;

// ========= MAGICAL Random Option 2=========
// - Magic
setarray .RandOpt2_M[0],			  

					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT;	 					// Dex
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_M_MinV[0],3,3,3;
setarray .RandOpt2_M_MaxV[0],5,5,5;

// ========= MAGICAL Random Option 3=========
// - Magic
setarray .RandOpt3_M[0],
					    
					    RDMOPT_RACE_MDAMAGE_NOTHING,	 					// Str
					    RDMOPT_RACE_MDAMAGE_ANIMAL,	 					// Agi
					    RDMOPT_RACE_MDAMAGE_PLANT,		 				// Vit
					    RDMOPT_RACE_MDAMAGE_INSECT,		 				// Luk
					    RDMOPT_RACE_MDAMAGE_UNDEAD,		 				// Luk	
					    RDMOPT_RACE_MDAMAGE_HUMAN,		 				// Luk						
						RDMOPT_RACE_MDAMAGE_FISHS,					// ATK%
						RDMOPT_RACE_MDAMAGE_DEVIL,						// ASPD
						RDMOPT_RACE_MDAMAGE_ANGEL,					// ASPD%
						RDMOPT_RACE_MDAMAGE_DRAGON;				// HIT											
					    // ToDo: // Recover 1500 of MMDAMage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_M_MinV[0],7,7,7,7,7,7,7,7,7,7;
setarray .RandOpt3_M_MaxV[0],14,14,14,14,14,14,14,14,14,14;

// ========= MAGICAL Random Option 4=========
// - Magic
setarray .RandOpt4_M[0],
					    
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
						RDMOPT_VAR_ATTMPOWER,						// MATK
						RDMOPT_VAR_MAGICATKPERCENT,					// MATK%
						RDMOPT_DEC_SPELL_CAST_TIME,					// VCT
						RDMOPT_DEC_SPELL_DELAY_TIME,				// ACD
						RDMOPT_CLASS_IGNORE_MDEF_PERCENT_NORMAL,	// NORMAL
						RDMOPT_CLASS_IGNORE_MDEF_PERCENT_BOSS,		// BOSS			
						RDMOPT_DEC_SP_CONSUMPTION;					// SP CONS
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_M_MinV[0],3,3,3,15,3,3,3,8,8,2;
setarray .RandOpt4_M_MaxV[0],5,5,5,40,8,8,8,15,15,5;


// ========= MAGICAL Random Option 5=========
// - Magic
setarray .RandOpt5_M[0],
					    
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex

						RDMOPT_VAR_MAGICATKPERCENT,					// MATK%
						RDMOPT_DEC_SPELL_CAST_TIME,					// VCT
						RDMOPT_DEC_SPELL_DELAY_TIME,				// ACD
						RDMOPT_CLASS_IGNORE_MDEF_PERCENT_NORMAL,	// NORMAL
						RDMOPT_CLASS_IGNORE_MDEF_PERCENT_BOSS,		// BOSS			
						RDMOPT_DEC_SP_CONSUMPTION;					// SP CONS
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_M_MinV[0],1,1,1,2,2,2,5,5,1;
setarray .RandOpt5_M_MaxV[0],5,5,5,8,8,8,12,12,3;

// ========= RANGED Random Option 1=========
// - RANGED
setarray .RandOpt1_R[0],
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk				
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_R_MinV[0],1,1,1,1;
setarray .RandOpt1_R_MaxV[0],3,3,3,3;

// ========= RANGED Random Option 2=========
// - RANGED
setarray .RandOpt2_R[0],
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk				
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_R_MinV[0],3,3,3,3;
setarray .RandOpt2_R_MaxV[0],5,5,5,5;

// ========= RANGED Random Option 3=========
// - RANGED
setarray .RandOpt3_R[0],
					    RDMOPT_RACE_DAMAGE_NOTHING,	 					// Str
					    RDMOPT_RACE_DAMAGE_ANIMAL,	 					// Agi
					    RDMOPT_RACE_DAMAGE_PLANT,		 				// Vit
					    RDMOPT_RACE_DAMAGE_INSECT,		 				// Luk
					    RDMOPT_RACE_DAMAGE_UNDEAD,		 				// Luk	
					    RDMOPT_RACE_DAMAGE_HUMAN,		 				// Luk						
						RDMOPT_RACE_DAMAGE_FISHS,					// ATK%
						RDMOPT_RACE_DAMAGE_DEVIL,						// ASPD
						RDMOPT_RACE_DAMAGE_ANGEL,					// ASPD%
						RDMOPT_RACE_DAMAGE_DRAGON;				// HIT								
					    // ToDo: // Recover 1500 of DAMage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_R_MinV[0],7,7,7,7,7,7,7,7,7,7;
setarray .RandOpt3_R_MaxV[0],14,14,14,14,14,14,14,14,14,14;

// ========= RANGED Random Option 4=========
// - RANGED
setarray .RandOpt4_R[0],
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_ATTPOWER,						// ATK
						RDMOPT_VAR_ATKPERCENT,						// ATK%
						RDMOPT_VAR_PLUSASPDPERCENT,					// ASPD%
						RDMOPT_VAR_HITSUCCESSVALUE,					// HIT
						RDMOPT_VAR_CRITICALSUCCESSVALUE,			// CRIT
						RDMOPT_DAMAGE_CRI_TARGET,					// CRIT DMG
						RDMOPT_RANGE_ATTACK_DAMAGE_TARGET;			// Range					
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_R_MinV[0],3,3,3,3,15,3,5,10,6,4,5;
setarray .RandOpt4_R_MaxV[0],6,6,6,6,40,8,12,25,16,10,12;


// ========= RANGED Random Option 5=========
// - RANGED
setarray .RandOpt5_R[0],
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk

						RDMOPT_VAR_ATKPERCENT,						// ATK%
						RDMOPT_VAR_PLUSASPD,						// ASPD
						RDMOPT_VAR_PLUSASPDPERCENT,					// ASPD%
						RDMOPT_VAR_HITSUCCESSVALUE,					// HIT
						RDMOPT_VAR_CRITICALSUCCESSVALUE,			// CRIT
						RDMOPT_DAMAGE_CRI_TARGET,					// CRIT DMG
						RDMOPT_RANGE_ATTACK_DAMAGE_TARGET;			// Range					
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_R_MinV[0],1,1,1,1,3,1,3,5,3,5,3;
setarray .RandOpt5_R_MaxV[0],5,5,5,5,8,2,12,13,8,16,10;

// ========= SHIELD =========
// ========= Random Option 1 =========
// - SHIELD 1
setarray .RandOpt1_S[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_S_MinV[0],1,1,1,1;
setarray .RandOpt1_S_MaxV[0],3,3,3,3;


// ========= Random Option 2 =========
// - SHIELD 2
setarray .RandOpt2_S[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXHPPERCENT,					// HP%
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_MAXSPPERCENT,					// SP%
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_DAMAGE_SIZE_SMALL_USER,
						RDMOPT_DAMAGE_SIZE_MIDIUM_USER,						//
						RDMOPT_DAMAGE_SIZE_LARGE_USER,						
						RDMOPT_VAR_PLUSASPDPERCENT;						// ASPD
						
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_S_MinV[0],1,1,1,1,100,2,20,2,5,1,1,1,1,1;
setarray .RandOpt2_S_MaxV[0],3,3,3,3,300,5,60,5,20,5,5,5,5,5;

// ========= Random Option 3=========
// - SHIELD 3
setarray .RandOpt3_S[0],
					    RDMOPT_RACE_TOLERACE_NOTHING,	 					// Str
					    RDMOPT_RACE_TOLERACE_UNDEAD,	 					// Agi
					    RDMOPT_RACE_TOLERACE_ANIMAL,		 				// Vit
					    RDMOPT_RACE_TOLERACE_PLANT,		 				// Luk
						RDMOPT_RACE_TOLERACE_INSECT,						// HP
						RDMOPT_RACE_TOLERACE_FISHS,					// HP%
						RDMOPT_RACE_TOLERACE_DEVIL,						// SP
						RDMOPT_RACE_TOLERACE_ANGEL,					// SP%
						RDMOPT_RACE_TOLERACE_HUMAN,						//						
						RDMOPT_RACE_TOLERACE_DRAGON;					// DEF
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_S_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt3_S_MaxV[0],10,10,10,10,10,10,10,10,10,10;

// ========= Random Option 4=========
// - SHIELD 4
setarray .RandOpt4_S[0],
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_VAR_CRITICALSUCCESSVALUE,			// CRIT	
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_VAR_PLUSASPDPERCENT;						// ASPD
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_S_MinV[0],100,20,5,3,3,5,3;
setarray .RandOpt4_S_MaxV[0],300,60,25,8,6,15,8;

// ========= Random Option 5=========
// - SHIELD 5
setarray .RandOpt5_S[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXHPPERCENT,					// HP%
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_MAXSPPERCENT,					// SP%
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_ATTR_TOLERACE_ALLBUTNOTHING,
						RDMOPT_ATTR_TOLERACE_NOTHING,
						RDMOPT_VAR_PLUSASPDPERCENT;						// ASPD
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_S_MinV[0],1,1,1,1,100,2,15,2,10,2,2,2,2;
setarray .RandOpt5_S_MaxV[0],3,3,3,3,350,6,70,6,30,10,5,5,7;

// ========= SHIELD M =========
// ========= Random Option 1 =========
// - SHIELD 1
setarray .RandOpt1_SM[0],
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT;	 					// Dex
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_SM_MinV[0],1,1,1;
setarray .RandOpt1_SM_MaxV[0],3,3,3;


// ========= Random Option 2 =========
// - SHIELD 2
setarray .RandOpt2_SM[0],
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXHPPERCENT,					// HP%
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_MAXSPPERCENT,					// SP%
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_DAMAGE_SIZE_SMALL_USER,
						RDMOPT_DAMAGE_SIZE_MIDIUM_USER,						//
						RDMOPT_DAMAGE_SIZE_LARGE_USER,						
						RDMOPT_DEC_SPELL_CAST_TIME;	
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_SM_MinV[0],1,1,1,100,1,20,1,5,1,1,1,1,1;
setarray .RandOpt2_SM_MaxV[0],3,3,3,300,3,60,3,15,5,5,5,5,3;

// ========= Random Option 3=========
// - SHIELD 3
setarray .RandOpt3_SM[0],
					    RDMOPT_RACE_TOLERACE_NOTHING,	 					// Str
					    RDMOPT_RACE_TOLERACE_UNDEAD,	 					// Agi
					    RDMOPT_RACE_TOLERACE_ANIMAL,		 				// Vit
					    RDMOPT_RACE_TOLERACE_PLANT,		 				// Luk
						RDMOPT_RACE_TOLERACE_INSECT,						// HP
						RDMOPT_RACE_TOLERACE_FISHS,					// HP%
						RDMOPT_RACE_TOLERACE_DEVIL,						// SP
						RDMOPT_RACE_TOLERACE_ANGEL,					// SP%
						RDMOPT_RACE_TOLERACE_HUMAN,						//						
						RDMOPT_RACE_TOLERACE_DRAGON;					// DEF
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_SM_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt3_SM_MaxV[0],10,10,10,10,10,10,10,10,10,10;

// ========= Random Option 4=========
// - SHIELD 4
setarray .RandOpt4_SM[0],
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE		
					    RDMOPT_DEC_SPELL_CAST_TIME,	 			 	// CT
						RDMOPT_DEC_SP_CONSUMPTION,					// SP
						RDMOPT_DEC_SPELL_DELAY_TIME;				// ACD
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_SM_MinV[0],100,20,10,3,5,3,1,3;
setarray .RandOpt4_SM_MaxV[0],300,60,25,8,15,6,3,5;

// ========= Random Option 5=========
// - SHIELD 5
setarray .RandOpt5_SM[0],
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXHPPERCENT,					// HP%
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_MAXSPPERCENT,					// SP%
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF					
						RDMOPT_ATTR_TOLERACE_ALLBUTNOTHING,
						RDMOPT_ATTR_TOLERACE_NOTHING,
						RDMOPT_DEC_SPELL_CAST_TIME;	
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_SM_MinV[0],1,1,1,100,2,15,2,10,2,2,2,2;
setarray .RandOpt5_SM_MaxV[0],3,3,3,350,6,70,6,30,10,5,5,5;


// ========= ARMOR =========
// ========= Random Option 1 =========
// - Armory 1
setarray .RandOpt1_AP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_AP_MinV[0],1,1,1,1;
setarray .RandOpt1_AP_MaxV[0],3,3,3,3;


// ========= Random Option 2 =========
// - Armory 2
setarray .RandOpt2_AP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF				
						RDMOPT_DAMAGE_SIZE_SMALL_USER,
						RDMOPT_DAMAGE_SIZE_MIDIUM_USER,						//
						RDMOPT_DAMAGE_SIZE_LARGE_USER,
						RDMOPT_VAR_PLUSASPDPERCENT;	
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_AP_MinV[0],1,1,1,1,100,20,4,5,1,1,1,1;
setarray .RandOpt2_AP_MaxV[0],3,3,3,3,300,60,7,15,5,5,5,4;

// ========= Random Option 3=========
setarray .RandOpt3_AP[0],
					    RDMOPT_RACE_TOLERACE_NOTHING,	 					// Str
					    RDMOPT_RACE_TOLERACE_UNDEAD,	 					// Agi
					    RDMOPT_RACE_TOLERACE_ANIMAL,		 				// Vit
					    RDMOPT_RACE_TOLERACE_PLANT,		 				// Luk
						RDMOPT_RACE_TOLERACE_INSECT,						// HP
						RDMOPT_RACE_TOLERACE_FISHS,					// HP%
						RDMOPT_RACE_TOLERACE_DEVIL,						// SP
						RDMOPT_RACE_TOLERACE_ANGEL,					// SP%
						RDMOPT_RACE_TOLERACE_HUMAN,						//						
						RDMOPT_RACE_TOLERACE_DRAGON;					// DEF
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_AP_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt3_AP_MaxV[0],10,10,10,10,10,10,10,10,10,10;


// ========= Random Option 4=========
setarray .RandOpt4_AP[0],
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_VAR_CRITICALSUCCESSVALUE,			// CRIT	
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_VAR_PLUSASPDPERCENT;							// ASPD
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_AP_MinV[0],100,20,5,3,3,5,3;
setarray .RandOpt4_AP_MaxV[0],300,60,25,8,6,15,8;


// ========= Random Option 5=========
setarray .RandOpt5_AP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit				
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_DAMAGE_SIZE_SMALL_USER,
						RDMOPT_DAMAGE_SIZE_MIDIUM_USER,						//
						RDMOPT_DAMAGE_SIZE_LARGE_USER,
						RDMOPT_VAR_PLUSASPDPERCENT;	
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_AP_MinV[0],1,1,1,1,100,20,8,10,2,2,2,2;
setarray .RandOpt5_AP_MaxV[0],3,3,3,3,350,70,15,30,6,6,6,7;

// ========= GARMENT =========
// ========= Random Option 1 =========
// - GARMENT 1
setarray .RandOpt1_GP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_GP_MinV[0],1,1,1,1;
setarray .RandOpt1_GP_MaxV[0],3,3,3,3;


// ========= Random Option 2 =========
// - garment 2
setarray .RandOpt2_GP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_MDAMAGE_SIZE_SMALL_USER,
						RDMOPT_MDAMAGE_SIZE_MIDIUM_USER,
						RDMOPT_MDAMAGE_SIZE_LARGE_USER,
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_VAR_PLUSASPDPERCENT;					// ASPD%
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_GP_MinV[0],1,1,1,1,1,1,1,1,1,2,1;
setarray .RandOpt2_GP_MaxV[0],3,3,3,3,3,3,3,3,3,5,4;

// ========= Random Option 3=========
setarray .RandOpt3_GP[0],
					    RDMOPT_ATTR_TOLERACE_NOTHING,	 					// Str
					    RDMOPT_ATTR_TOLERACE_WATER,	 					// Agi
					    RDMOPT_ATTR_TOLERACE_GROUND,		 				// Vit
					    RDMOPT_ATTR_TOLERACE_FIRE,		 				// Luk
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_ATTR_TOLERACE_POISON,
						RDMOPT_ATTR_TOLERACE_SAINT,						// MDEF
						RDMOPT_ATTR_TOLERACE_DARKNESS,
						RDMOPT_ATTR_TOLERACE_TELEKINESIS,
						RDMOPT_ATTR_TOLERACE_UNDEAD;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_GP_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt3_GP_MaxV[0],10,10,10,10,10,10,10,10,10,10;

// ========= Random Option 4=========
setarray .RandOpt4_GP[0],
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_VAR_CRITICALSUCCESSVALUE,			// CRIT	
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_VAR_PLUSASPDPERCENT;							// ASPD
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_GP_MinV[0],100,20,5,3,3,5,3;
setarray .RandOpt4_GP_MaxV[0],300,60,25,8,6,15,8;

// ========= Random Option 5=========
setarray .RandOpt5_GP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_MDAMAGE_SIZE_SMALL_USER,
						RDMOPT_MDAMAGE_SIZE_MIDIUM_USER,
						RDMOPT_MDAMAGE_SIZE_LARGE_USER,
						RDMOPT_VAR_PLUSASPDPERCENT;					// ASPD%
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_GP_MinV[0],1,1,1,1,2,2,2,2,2,2,2;
setarray .RandOpt5_GP_MaxV[0],3,3,3,3,6,6,10,6,6,6,7;

// ========= SHOES =========
// ========= Random Option 1 =========
// - SHOES 1
setarray .RandOpt1_SHP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_SHP_MinV[0],1,1,1,1;
setarray .RandOpt1_SHP_MaxV[0],3,3,3,3;


// ========= Random Option 2 =========
// - SHOES 2
setarray .RandOpt2_SHP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_HPACCELERATION,
						RDMOPT_VAR_SPACCELERATION,
						RDMOPT_VAR_CRITICALSUCCESSVALUE,
						RDMOPT_VAR_PLUSAVOIDSUCCESSVALUE,
						RDMOPT_DAMAGE_CRI_TARGET,
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_VAR_PLUSASPDPERCENT;					// ASPD%
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_SHP_MinV[0],1,1,1,1,8,8,5,1,2,5,3;
setarray .RandOpt2_SHP_MaxV[0],3,3,3,3,20,20,12,4,6,18,9;

// ========= Random Option 3=========
setarray .RandOpt3_SHP[0],
					    RDMOPT_RACE_IGNORE_DEF_PERCENT_NOTHING,	 					// Agi
					    RDMOPT_RACE_IGNORE_DEF_PERCENT_UNDEAD,	 					// Str
					    RDMOPT_RACE_IGNORE_DEF_PERCENT_ANIMAL,		 				// Vit
					    RDMOPT_RACE_IGNORE_DEF_PERCENT_PLANT,		 				// Luk
						RDMOPT_RACE_IGNORE_DEF_PERCENT_INSECT,
						RDMOPT_RACE_IGNORE_DEF_PERCENT_FISHS,
						RDMOPT_RACE_IGNORE_DEF_PERCENT_DEVIL,
						RDMOPT_RACE_IGNORE_DEF_PERCENT_HUMAN,
						RDMOPT_RACE_IGNORE_DEF_PERCENT_ANGEL,				// FLEE
						RDMOPT_RACE_IGNORE_DEF_PERCENT_DRAGON;					// ASPD%
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_SHP_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt3_SHP_MaxV[0],10,10,10,10,10,10,10,10,10,10;

// ========= Random Option 4=========
setarray .RandOpt4_SHP[0],
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_VAR_CRITICALSUCCESSVALUE,			// CRIT	
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_VAR_PLUSASPDPERCENT;							// ASPD
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_SHP_MinV[0],100,20,5,3,3,5,3;
setarray .RandOpt4_SHP_MaxV[0],300,60,25,8,6,15,8;

// ========= Random Option 5=========
setarray .RandOpt5_SHP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_HPACCELERATION,
						RDMOPT_VAR_SPACCELERATION,
						RDMOPT_VAR_CRITICALSUCCESSVALUE,
						RDMOPT_VAR_PLUSAVOIDSUCCESSVALUE,
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_VAR_PLUSASPDPERCENT;					// ASPD%
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_SHP_MinV[0],1,1,1,1,10,10,2,2,8,2;
setarray .RandOpt5_SHP_MaxV[0],3,3,3,3,30,30,7,5,15,7;


// ========= ARMOR =========
// ========= Random Option 1 =========
// - Armory 1
setarray .RandOpt1_AM[0],
					   
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT;	 					// Dex
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_AM_MinV[0],1,1,1;
setarray .RandOpt1_AM_MaxV[0],3,3,3;


// ========= Random Option 2 =========
// - Armory 2
setarray .RandOpt2_AM[0],
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex					   
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_DAMAGE_SIZE_SMALL_USER,
						RDMOPT_DAMAGE_SIZE_MIDIUM_USER,						//
						RDMOPT_DAMAGE_SIZE_LARGE_USER;	
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_AM_MinV[0],1,1,1,100,20,5,8,1,1,1;
setarray .RandOpt2_AM_MaxV[0],3,3,3,300,60,15,20,5,5,5;

// ========= Random Option 3=========
setarray .RandOpt3_AM[0],
					   
					    RDMOPT_RACE_TOLERACE_NOTHING,	 					// Str
					    RDMOPT_RACE_TOLERACE_UNDEAD,	 					// Agi
					    RDMOPT_RACE_TOLERACE_ANIMAL,		 				// Vit
					    RDMOPT_RACE_TOLERACE_PLANT,		 				// Luk
						RDMOPT_RACE_TOLERACE_INSECT,						// HP
						RDMOPT_RACE_TOLERACE_FISHS,					// HP%
						RDMOPT_RACE_TOLERACE_DEVIL,						// SP
						RDMOPT_RACE_TOLERACE_ANGEL,					// SP%
						RDMOPT_RACE_TOLERACE_HUMAN,						//						
						RDMOPT_RACE_TOLERACE_DRAGON;					// DEF
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_AM_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt3_AM_MaxV[0],10,10,10,10,10,10,10,10,10,10;

// ========= Random Option 4=========
setarray .RandOpt4_AM[0],
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE		
					    RDMOPT_DEC_SPELL_CAST_TIME,	 			 	// CT
						RDMOPT_DEC_SP_CONSUMPTION,					// SP
						RDMOPT_DEC_SPELL_DELAY_TIME;				// ACD
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_AM_MinV[0],100,20,10,3,5,3,1,3;
setarray .RandOpt4_AM_MaxV[0],300,60,25,8,15,6,3,5;

// ========= Random Option 5=========
setarray .RandOpt5_AM[0],
					   
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						
						RDMOPT_CLASS_DAMAGE_NORMAL_USER,
						RDMOPT_DAMAGE_SIZE_LARGE_USER,
						RDMOPT_DEC_SPELL_CAST_TIME;	
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_AM_MinV[0],1,1,1,100,20,8,10,2,2,2,2;
setarray .RandOpt5_AM_MaxV[0],3,3,3,200,35,7,15,3,3,3,3;

// ========= GARMENT =========
// ========= Random Option 1 =========
// - GARMENT 1
setarray .RandOpt1_GM[0],
					    
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT;	 					// Dex
					    // ToDo: // Recover 1500 of MDAMAGE lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_GM_MinV[0],1,1,1;
setarray .RandOpt1_GM_MaxV[0],3,3,3;


// ========= Random Option 2 =========
// - garment 2
setarray .RandOpt2_GM[0],
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex					    
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_MDAMAGE_SIZE_SMALL_USER,
						RDMOPT_MDAMAGE_SIZE_MIDIUM_USER,
						RDMOPT_MDAMAGE_SIZE_LARGE_USER,
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_DEC_SPELL_CAST_TIME;					// ASPD%
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_GM_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt2_GM_MaxV[0],3,3,3,3,3,3,3,3,5,3;

// ========= Random Option 3=========
setarray .RandOpt3_GM[0],
					    RDMOPT_ATTR_TOLERACE_NOTHING,	 					// Str
					    RDMOPT_ATTR_TOLERACE_WATER,	 					// Agi
					    RDMOPT_ATTR_TOLERACE_GROUND,		 				// Vit
					    RDMOPT_ATTR_TOLERACE_FIRE,		 				// Luk
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_ATTR_TOLERACE_POISON,
						RDMOPT_ATTR_TOLERACE_SAINT,						// MDEF
						RDMOPT_ATTR_TOLERACE_DARKNESS,
						RDMOPT_ATTR_TOLERACE_TELEKINESIS,
						RDMOPT_ATTR_TOLERACE_UNDEAD;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_GM_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt3_GM_MaxV[0],10,10,10,10,10,10,10,10,10,10;

// ========= Random Option 4=========
setarray .RandOpt4_GM[0],
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE		
					    RDMOPT_DEC_SPELL_CAST_TIME,	 			 	// CT
						RDMOPT_DEC_SP_CONSUMPTION,					// SP
						RDMOPT_DEC_SPELL_DELAY_TIME;				// ACD
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_GM_MinV[0],100,20,10,3,5,3,1,3;
setarray .RandOpt4_GM_MaxV[0],300,60,25,8,15,6,3,5;

// ========= Random Option 5=========
setarray .RandOpt5_GM[0],
					    
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_MDAMAGE_SIZE_SMALL_USER,
						RDMOPT_MDAMAGE_SIZE_MIDIUM_USER,
						RDMOPT_MDAMAGE_SIZE_LARGE_USER,
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_DEC_SPELL_CAST_TIME;					// ASPD%
					    // ToDo: // Recover 1500 of MMDAMAGE lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_GM_MinV[0],1,1,1,2,2,2,2,2,2,2;
setarray .RandOpt5_GM_MaxV[0],3,3,3,6,6,6,6,6,10,5;

// ========= SHOES =========
// ========= Random Option 1 =========
// - SHOES 1
setarray .RandOpt1_SHM[0],
					   
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT;	 					// Dex
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_SHM_MinV[0],1,1,1;
setarray .RandOpt1_SHM_MaxV[0],3,3,3;


// ========= Random Option 2 =========
// - SHOES 2
setarray .RandOpt2_SHM[0],
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex					   
						RDMOPT_VAR_HPACCELERATION,
						RDMOPT_VAR_SPACCELERATION,
						RDMOPT_MDAMAGE_PROPERTY_FIRE_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_WATER_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_WIND_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_GROUND_TARGET,						
						RDMOPT_VAR_PLUSAVOIDSUCCESSVALUE,
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_DEC_SPELL_CAST_TIME;					// ASPD%
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_SHM_MinV[0],1,1,1,5,5,1,1,1,1,1,4,1;
setarray .RandOpt2_SHM_MaxV[0],3,3,3,15,15,3,3,3,3,3,7,3;

// ========= Random Option 3=========
setarray .RandOpt3_SHM[0],
					    RDMOPT_RACE_IGNORE_MDEF_PERCENT_NOTHING,	 					// Agi
					    RDMOPT_RACE_IGNORE_MDEF_PERCENT_UNDEAD,	 					// Str
					    RDMOPT_RACE_IGNORE_MDEF_PERCENT_ANIMAL,		 				// Vit
					    RDMOPT_RACE_IGNORE_MDEF_PERCENT_PLANT,		 				// Luk
						RDMOPT_RACE_IGNORE_MDEF_PERCENT_INSECT,
						RDMOPT_RACE_IGNORE_MDEF_PERCENT_FISHS,
						RDMOPT_RACE_IGNORE_MDEF_PERCENT_DEVIL,
						RDMOPT_RACE_IGNORE_MDEF_PERCENT_HUMAN,
						RDMOPT_RACE_IGNORE_MDEF_PERCENT_ANGEL,				// FLEE
						RDMOPT_RACE_IGNORE_MDEF_PERCENT_DRAGON;					// ASPD%
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_SHM_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt3_SHM_MaxV[0],10,10,10,10,10,10,10,10,10,10;

// ========= Random Option 4=========
setarray .RandOpt4_SHM[0],
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT,						// SP
						RDMOPT_VAR_ITEMDEFPOWER,					// DEF
						RDMOPT_VAR_MDEFPOWER,						// MDEF
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE		
					    RDMOPT_DEC_SPELL_CAST_TIME,	 			 	// CT
						RDMOPT_DEC_SP_CONSUMPTION,					// SP
						RDMOPT_DEC_SPELL_DELAY_TIME;				// ACD
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_SHM_MinV[0],100,20,10,3,5,3,1,3;
setarray .RandOpt4_SHM_MaxV[0],300,60,25,8,15,6,3,5;

// ========= Random Option 5=========
setarray .RandOpt5_SHM[0],
					   
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
						RDMOPT_VAR_HPACCELERATION,
						RDMOPT_VAR_SPACCELERATION,
						RDMOPT_MDAMAGE_PROPERTY_FIRE_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_WATER_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_WIND_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_GROUND_TARGET,						
						RDMOPT_VAR_PLUSAVOIDSUCCESSVALUE,
						RDMOPT_VAR_AVOIDSUCCESSVALUE,				// FLEE
						RDMOPT_DEC_SPELL_CAST_TIME;					// ASPD%
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_SHM_MinV[0],1,1,1,10,10,2,2,2,2,2,8,2;
setarray .RandOpt5_SHM_MaxV[0],3,3,3,30,30,5,5,5,5,5,15,5;


// ========= Random Option 1 =========
// - Accesories
setarray .RandOpt1_AC[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk							
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_AC_MinV[0],1,1,1,1;
setarray .RandOpt1_AC_MaxV[0],3,3,3,3;

// ========= Random Option 2 =========
// - Accesories
setarray .RandOpt3_AC[0],
					    RDMOPT_VAR_PLUSASPDPERCENT, 					// Str
						RDMOPT_VAR_CRITICALSUCCESSVALUE,				// CRIT
						RDMOPT_DAMAGE_CRI_TARGET,						// CRIT DMG
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_ATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_AC_MinV[0],1,1,2,1,1,1,1,1,1,1;
setarray .RandOpt3_AC_MaxV[0],3,2,4,4,4,4,4,2,2,2;

// ========= Random Option 3 =========
// - Accesories
setarray .RandOpt4_AC[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
					    RDMOPT_VAR_PLUSASPDPERCENT, 					// Str
						RDMOPT_VAR_CRITICALSUCCESSVALUE,				// CRIT
						RDMOPT_DAMAGE_CRI_TARGET,						// CRIT DMG
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_ATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_AC_MinV[0],1,1,1,1,2,2,3,2,2,2,2,1,1,1;
setarray .RandOpt4_AC_MaxV[0],3,3,3,3,5,4,8,5,5,5,5,3,3,3;

// ========= Random Option 4 =========
// - Accesories
setarray .RandOpt4_AC[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
					    RDMOPT_VAR_PLUSASPDPERCENT, 					// Str
						RDMOPT_VAR_CRITICALSUCCESSVALUE,				// CRIT
						RDMOPT_DAMAGE_CRI_TARGET,						// CRIT DMG
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_ATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_AC_MinV[0],1,1,1,1,2,2,3,2,2,2,2,1,1,1;
setarray .RandOpt4_AC_MaxV[0],3,3,3,3,5,4,8,5,5,5,5,3,3,3;

// ========= Random Option 5 =========
// - Accesories
setarray .RandOpt5_AC[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
					    RDMOPT_VAR_PLUSASPDPERCENT, 					// Str
						RDMOPT_VAR_CRITICALSUCCESSVALUE,				// CRIT
						RDMOPT_DAMAGE_CRI_TARGET,						// CRIT DMG
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_ATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_AC_MinV[0],1,1,1,1,2,2,3,2,2,2,2,1,1,1;
setarray .RandOpt5_AC_MaxV[0],3,3,3,3,5,4,8,5,5,5,5,3,3,3;

// ========= Random Option 1 =========
// - Accesories
setarray .RandOpt1_ACR[0],
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk							
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_ACR_MinV[0],1,1,1,1;
setarray .RandOpt1_ACR_MaxV[0],3,3,3,3;

// ========= Random Option 2 =========
// - Accesories
setarray .RandOpt3_ACR[0],
					    RDMOPT_VAR_PLUSASPDPERCENT, 					// Str
						RDMOPT_VAR_CRITICALSUCCESSVALUE,				// CRIT
						RDMOPT_DAMAGE_CRI_TARGET,						// CRIT DMG
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_ATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_ACR_MinV[0],1,1,2,1,1,1,1,1,1,1;
setarray .RandOpt3_ACR_MaxV[0],3,2,4,4,4,4,4,2,2,2;

// ========= Random Option 3 =========
// - Accesories
setarray .RandOpt4_ACR[0],
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk	
					    RDMOPT_VAR_PLUSASPDPERCENT, 					// Str
						RDMOPT_VAR_CRITICALSUCCESSVALUE,				// CRIT
						RDMOPT_DAMAGE_CRI_TARGET,						// CRIT DMG
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_ATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_ACR_MinV[0],1,1,1,1,2,2,3,2,2,2,2,1,1,1;
setarray .RandOpt4_ACR_MaxV[0],3,3,3,3,5,4,8,5,5,5,5,3,3,3;

// ========= Random Option 4 =========
// - Accesories
setarray .RandOpt4_ACR[0],
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk	
					    RDMOPT_VAR_PLUSASPDPERCENT, 					// Str
						RDMOPT_VAR_CRITICALSUCCESSVALUE,				// CRIT
						RDMOPT_DAMAGE_CRI_TARGET,						// CRIT DMG
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_ATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_ACR_MinV[0],1,1,1,1,2,2,3,2,2,2,2,1,1,1;
setarray .RandOpt4_ACR_MaxV[0],3,3,3,3,5,4,8,5,5,5,5,3,3,3;

// ========= Random Option 5 =========
// - Accesories
setarray .RandOpt5_ACR[0],
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk	
					    RDMOPT_VAR_PLUSASPDPERCENT, 					// Str
						RDMOPT_VAR_CRITICALSUCCESSVALUE,				// CRIT
						RDMOPT_DAMAGE_CRI_TARGET,						// CRIT DMG
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_ATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_ACR_MinV[0],1,1,1,1,2,2,3,2,2,2,2,1,1,1;
setarray .RandOpt5_ACR_MaxV[0],3,3,3,3,5,4,8,5,5,5,5,3,3,3;

// ========= Random Option 1 =========
// - Accesories
setarray .RandOpt1_ACM[0],
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT;	 					// Dex						
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_ACM_MinV[0],1,1,1;
setarray .RandOpt1_ACM_MaxV[0],3,3,3;

// ========= Random Option 2 =========
// - Accesories
setarray .RandOpt3_ACM[0],
					    RDMOPT_DEC_SPELL_CAST_TIME,	 					// Str
						RDMOPT_DEC_SP_CONSUMPTION,						// CRIT
						RDMOPT_DEC_SPELL_DELAY_TIME,				// ACD
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_MAGICATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_ACM_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt3_ACM_MaxV[0],2,3,2,4,4,4,4,2,2,2;

// ========= Random Option 3 =========
// - Accesories
setarray .RandOpt4_ACM[0],
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_DEC_SPELL_CAST_TIME,	 					// Str
						RDMOPT_DEC_SP_CONSUMPTION,						// CRIT
						RDMOPT_DEC_SPELL_DELAY_TIME,				// ACD
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_MAGICATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_ACM_MinV[0],1,1,1,1,1,1,2,2,2,2,1,1,1;
setarray .RandOpt4_ACM_MaxV[0],3,3,3,7,5,7,5,5,5,5,3,3,3;

// ========= Random Option 4 =========
// - Accesories
setarray .RandOpt4_ACM[0],
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_DEC_SPELL_CAST_TIME,	 					// Str
						RDMOPT_DEC_SP_CONSUMPTION,						// CRIT
						RDMOPT_DEC_SPELL_DELAY_TIME,				// ACD
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_MAGICATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_ACM_MinV[0],1,1,1,1,1,1,2,2,2,2,1,1,1;
setarray .RandOpt4_ACM_MaxV[0],3,3,3,7,5,7,5,5,5,5,3,3,3;

// ========= Random Option 5 =========
// - Accesories
setarray .RandOpt5_ACM[0],
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_DEC_SPELL_CAST_TIME,	 					// Str
						RDMOPT_DEC_SP_CONSUMPTION,						// CRIT
						RDMOPT_DEC_SPELL_DELAY_TIME,				// ACD
						RDMOPT_ATTR_TOLERACE_WATER,
						RDMOPT_ATTR_TOLERACE_FIRE,	
						RDMOPT_ATTR_TOLERACE_GROUND,	
						RDMOPT_ATTR_TOLERACE_WIND,
						RDMOPT_VAR_MAXHPPERCENT,
						RDMOPT_VAR_MAXSPPERCENT,
						RDMOPT_VAR_MAGICATKPERCENT;
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_ACM_MinV[0],1,1,1,1,1,1,2,2,2,2,1,1,1;
setarray .RandOpt5_ACM_MaxV[0],3,3,3,7,5,7,5,5,5,5,3,3,3;


// ========= HEADGEAR TOP=============
// ========= Random Option 1 =========
// - HGT Level 1
setarray .RandOpt1_HGTP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk										
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_HGTP_MinV[0],1,1,1,1;
setarray .RandOpt1_HGTP_MaxV[0],3,3,3,3;

// ========= Random Option 2 =========
// - HGT Level 2
setarray .RandOpt2_HGTP[0],

						RDMOPT_DAMAGE_PROPERTY_NOTHING_TARGET,		// Neutral
						RDMOPT_DAMAGE_PROPERTY_WATER_TARGET,
						RDMOPT_DAMAGE_PROPERTY_GROUND_TARGET,
						RDMOPT_DAMAGE_PROPERTY_FIRE_TARGET,
						RDMOPT_DAMAGE_PROPERTY_WIND_TARGET,
						RDMOPT_DAMAGE_PROPERTY_POISON_TARGET,
						RDMOPT_DAMAGE_PROPERTY_SAINT_TARGET,
						RDMOPT_DAMAGE_PROPERTY_DARKNESS_TARGET,
						RDMOPT_DAMAGE_PROPERTY_TELEKINESIS_TARGET,
						RDMOPT_DAMAGE_PROPERTY_UNDEAD_TARGET;										
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_HGTP_MinV[0],5,5,5,5,5,5,5,5,5,5;
setarray .RandOpt2_HGTP_MaxV[0],10,10,10,10,10,10,10,10,10,10;

// ========= Random Option 3 =========
// - HGT Level 3
setarray .RandOpt3_HGTP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk

						RDMOPT_VAR_ATKPERCENT,						// ATK%
						RDMOPT_VAR_PLUSASPD,						// ASPD
						RDMOPT_VAR_PLUSASPDPERCENT,					// ASPD%
						RDMOPT_VAR_HITSUCCESSVALUE,					// HIT				
						RDMOPT_VAR_CRITICALSUCCESSVALUE;			// CRIT						
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_HGTP_MinV[0],1,1,1,1,1,1,1,5,3;
setarray .RandOpt1_HGTP_MaxV[0],3,3,3,3,5,1,5,15,6;

// ========= Random Option 4 =========
// - HGT Level 4
setarray .RandOpt4_HGTP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk

						RDMOPT_VAR_ATKPERCENT,						// ATK%
						RDMOPT_VAR_PLUSASPD,						// ASPD
						RDMOPT_VAR_PLUSASPDPERCENT,					// ASPD%
						RDMOPT_VAR_HITSUCCESSVALUE,					// HIT				
						RDMOPT_VAR_CRITICALSUCCESSVALUE;			// CRIT						
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_HGTP_MinV[0],1,1,1,1,1,1,1,5,3;
setarray .RandOpt4_HGTP_MaxV[0],3,3,3,3,5,1,5,15,6;

// ========= Random Option 5 =========
// - HGT Level 5
setarray .RandOpt5_HGTP[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk

						RDMOPT_VAR_ATKPERCENT,						// ATK%
						RDMOPT_VAR_PLUSASPD,						// ASPD
						RDMOPT_VAR_PLUSASPDPERCENT,					// ASPD%
						RDMOPT_VAR_HITSUCCESSVALUE,					// HIT				
						RDMOPT_VAR_CRITICALSUCCESSVALUE;			// CRIT						
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_HGTP_MinV[0],1,1,1,1,1,1,1,5,3;
setarray .RandOpt5_HGTP_MaxV[0],3,3,3,3,5,1,5,15,6;

// ========= HEADGEAR TOP=============
// ========= Random Option 1 =========
// - HGT Level 1
setarray .RandOpt1_HGTR[0],
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk										
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_HGTR_MinV[0],1,1,1,1;
setarray .RandOpt1_HGTR_MaxV[0],3,3,3,3;

// ========= Random Option 2 =========
// - HGT Level 2
setarray .RandOpt2_HGTR[0],

						RDMOPT_DAMAGE_PROPERTY_NOTHING_TARGET,		// Neutral
						RDMOPT_DAMAGE_PROPERTY_WATER_TARGET,
						RDMOPT_DAMAGE_PROPERTY_GROUND_TARGET,
						RDMOPT_DAMAGE_PROPERTY_FIRE_TARGET,
						RDMOPT_DAMAGE_PROPERTY_WIND_TARGET,
						RDMOPT_DAMAGE_PROPERTY_POISON_TARGET,
						RDMOPT_DAMAGE_PROPERTY_SAINT_TARGET,
						RDMOPT_DAMAGE_PROPERTY_DARKNESS_TARGET,
						RDMOPT_DAMAGE_PROPERTY_TELEKINESIS_TARGET,
						RDMOPT_DAMAGE_PROPERTY_UNDEAD_TARGET;										
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_HGTR_MinV[0],5,5,5,5,5,5,5,5,5,5;
setarray .RandOpt2_HGTR_MaxV[0],10,10,10,10,10,10,10,10,10,10;

// ========= Random Option 3 =========
// - HGT Level 3
setarray .RandOpt3_HGTR[0],
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk

						RDMOPT_VAR_ATKPERCENT,						// ATK%
						RDMOPT_VAR_PLUSASPD,						// ASPD
						RDMOPT_VAR_PLUSASPDPERCENT,					// ASPD%
						RDMOPT_VAR_HITSUCCESSVALUE,					// HIT				
						RDMOPT_VAR_CRITICALSUCCESSVALUE;			// CRIT												
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_HGTR_MinV[0],1,1,1,1,1,1,1,1,1,5,3;
setarray .RandOpt3_HGTR_MaxV[0],3,3,3,3,3,3,5,1,5,15,6;

// ========= Random Option 4 =========
// - HGT Level 4
setarray .RandOpt4_HGTR[0],
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk

						RDMOPT_VAR_ATKPERCENT,						// ATK%
						RDMOPT_VAR_PLUSASPD,						// ASPD
						RDMOPT_VAR_PLUSASPDPERCENT,					// ASPD%
						RDMOPT_VAR_HITSUCCESSVALUE,					// HIT				
						RDMOPT_VAR_CRITICALSUCCESSVALUE;			// CRIT												
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_HGTR_MinV[0],1,1,1,1,1,1,1,1,1,5,3;
setarray .RandOpt4_HGTR_MaxV[0],3,3,3,3,3,3,5,1,5,15,6;

// ========= Random Option 5 =========
// - HGT Level 5
setarray .RandOpt5_HGTR[0],
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk

						RDMOPT_VAR_ATKPERCENT,						// ATK%
						RDMOPT_VAR_PLUSASPD,						// ASPD
						RDMOPT_VAR_PLUSASPDPERCENT,					// ASPD%
						RDMOPT_VAR_HITSUCCESSVALUE,					// HIT				
						RDMOPT_VAR_CRITICALSUCCESSVALUE;			// CRIT												
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_HGTR_MinV[0],1,1,1,1,1,1,1,1,1,5,3;
setarray .RandOpt5_HGTR_MaxV[0],3,3,3,3,3,3,5,1,5,15,6;

// ========= HEADGEAR TOP=============
// ========= Random Option 1 =========
// - HGT Level 1
setarray .RandOpt1_HGTM[0],
					    
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT;	 					// Dex										
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_HGTM_MinV[0],1,1,1;
setarray .RandOpt1_HGTM_MaxV[0],3,3,3;

// ========= Random Option 2 =========
// - HGT Level 2
setarray .RandOpt2_HGTM[0],
						RDMOPT_MDAMAGE_PROPERTY_NOTHING_TARGET,		// Neutral
						RDMOPT_DAMAGE_PROPERTY_WATER_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_GROUND_TARGET,
						RDMOPT_DAMAGE_PROPERTY_FIRE_TARGET,
						RDMOPT_DAMAGE_PROPERTY_WIND_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_POISON_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_SAINT_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_DARKNESS_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_TELEKINESIS_TARGET,
						RDMOPT_MDAMAGE_PROPERTY_UNDEAD_TARGET;										
					    // ToDo: // Recover 1500 of MDAMAGE lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_HGTM_MinV[0],5,5,5,5,5,5,5,5,5,5;
setarray .RandOpt2_HGTM_MaxV[0],10,10,10,10,10,10,10,10,10,10;

// ========= Random Option 3 =========
// - HGT Level 3
setarray .RandOpt3_HGTM[0],

					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex

						RDMOPT_VAR_MAGICATKPERCENT,					// MATK%
						RDMOPT_DEC_SPELL_CAST_TIME,					// VCT
						RDMOPT_DEC_SPELL_DELAY_TIME,				// ACD
						RDMOPT_CLASS_IGNORE_MDEF_PERCENT_NORMAL,	// NORMAL
						RDMOPT_CLASS_IGNORE_MDEF_PERCENT_BOSS,		// BOSS	
						RDMOPT_DEC_SP_CONSUMPTION;					// SP CONS
					    // ToDo: // Recover 1500 of Damage lost from size penalties

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_HGTM_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt3_HGTM_MaxV[0],3,3,3,3,5,5,5,3,3,2;

// ========= Random Option 4 =========
// - HGT Level 4
setarray .RandOpt4_HGTM[0],
					    
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex

						RDMOPT_VAR_MAGICATKPERCENT,					// MATK%
						RDMOPT_DEC_SPELL_CAST_TIME,					// VCT
						RDMOPT_DEC_SPELL_DELAY_TIME,				// ACD
						RDMOPT_CLASS_IGNORE_MDEF_PERCENT_NORMAL,	// NORMAL
						RDMOPT_CLASS_IGNORE_MDEF_PERCENT_BOSS,		// BOSS	
						RDMOPT_DEC_SP_CONSUMPTION;					// SP CONS
					    // ToDo: // Recover 1500 of Damage lost from size penalties

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_HGTM_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt4_HGTM_MaxV[0],3,3,3,3,5,5,5,3,3,2;

// ========= Random Option 5 =========
// - HGT Level 5
setarray .RandOpt5_HGTM[0],

					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex

						RDMOPT_VAR_MAGICATKPERCENT,					// MATK%
						RDMOPT_DEC_SPELL_CAST_TIME,					// VCT
						RDMOPT_DEC_SPELL_DELAY_TIME,				// ACD
						RDMOPT_CLASS_IGNORE_MDEF_PERCENT_NORMAL,	// NORMAL
						RDMOPT_CLASS_IGNORE_MDEF_PERCENT_BOSS,		// BOSS	
						RDMOPT_DEC_SP_CONSUMPTION;					// SP CONS
					    // ToDo: // Recover 1500 of Damage lost from size penalties

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_HGTM_MinV[0],1,1,1,1,1,1,1,1,1,1;
setarray .RandOpt5_HGTM_MaxV[0],3,3,3,3,5,5,5,3,3,2;


// ========= HEADGEAR MID =========
// ========= Random Option 1 =========
// - HGM Level 1
setarray .RandOpt1_HGM[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT;						
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_HGM_MinV[0],1,1,1,1,1,1,100,20;
setarray .RandOpt1_HGM_MaxV[0],3,3,3,3,3,3,300,60;

// ========= Random Option 2 =========
// - HGM Level 2
setarray .RandOpt2_HGM[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT;						
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_HGM_MinV[0],1,1,1,1,1,1,100,20;
setarray .RandOpt2_HGM_MaxV[0],3,3,3,3,3,3,300,60;

// ========= Random Option 3 =========
// - HGM Level 3
setarray .RandOpt3_HGM[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT;						
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_HGM_MinV[0],1,1,1,1,1,1,100,20;
setarray .RandOpt3_HGM_MaxV[0],3,3,3,3,3,3,300,60;

// ========= Random Option 4 =========
// - HGM Level 4
setarray .RandOpt4_HGM[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT,		 				// Luk
						RDMOPT_VAR_MAXHPAMOUNT,						// HP
						RDMOPT_VAR_MAXSPAMOUNT;						
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_HGM_MinV[0],1,1,1,1,1,1,100,20;
setarray .RandOpt4_HGM_MaxV[0],3,3,3,3,3,3,300,60;

// ========= Random Option 5 =========
// - HGM Level 5
setarray .RandOpt5_HGM[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk			
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_HGM_MinV[0],1,1,1,1,1,1;
setarray .RandOpt5_HGM_MaxV[0],2,2,2,2,2,2;

// ========= HEADGEAR LOW =========
// ========= Random Option 1 =========
// - HGL Level 1
setarray .RandOpt1_HGL[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk			
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt1_HGL_MinV[0],1,1,1,1,1,1;
setarray .RandOpt1_HGL_MaxV[0],1,1,1,1,1,1;

// ========= HEADGEAR LOW =========
// ========= Random Option 2 =========
// - HGL Level 2
setarray .RandOpt2_HGL[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk			
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt2_HGL_MinV[0],1,1,1,1,1,1;
setarray .RandOpt2_HGL_MaxV[0],1,1,1,1,1,1;

// ========= HEADGEAR LOW =========
// ========= Random Option 3 =========
// - HGL Level 3
setarray .RandOpt3_HGL[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk			
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt3_HGL_MinV[0],1,1,1,1,1,1;
setarray .RandOpt3_HGL_MaxV[0],1,1,1,1,1,1;

// ========= HEADGEAR LOW =========
// ========= Random Option 4 =========
// - HGL Level 4
setarray .RandOpt4_HGL[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk			
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt4_HGL_MinV[0],1,1,1,1,1,1;
setarray .RandOpt4_HGL_MaxV[0],1,1,1,1,1,1;

// ========= HEADGEAR LOW =========
// ========= Random Option 5 =========
// - HGL Level 5
setarray .RandOpt5_HGL[0],
					    RDMOPT_VAR_STRAMOUNT,	 					// Str
					    RDMOPT_VAR_AGIAMOUNT,	 					// Agi
					    RDMOPT_VAR_VITAMOUNT,		 				// Vit
						RDMOPT_VAR_INTAMOUNT,						// Int
					    RDMOPT_VAR_DEXAMOUNT,	 					// Dex
					    RDMOPT_VAR_LUKAMOUNT;		 				// Luk			
					    // ToDo: // Recover 1500 of Damage lost from size penalties
						

// - Values
// Note: When MinV and MaxV are the same, rand() will not be used!
setarray .RandOpt5_HGL_MinV[0],1,1,1,1,1,1;
setarray .RandOpt5_HGL_MaxV[0],1,1,1,1,1,1;
	}	
}